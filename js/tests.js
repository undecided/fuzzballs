// Generated by CoffeeScript 1.7.1
(function() {
  var Fuzz, FuzzFactory;

  Fuzz = (function() {
    function Fuzz() {}

    Fuzz.prototype.setOriginal = function(original, extractor) {
      this.original = original;
      this.extractor = extractor != null ? extractor : null;
      this.original_string = this.extractor ? this.extractor(this.original) : this.original;
      this.score = 0;
      return this;
    };

    Fuzz.prototype.quantifyMatch = function(q) {
      var current, last, qchar, qchar_index, _i, _len, _ref, _ref1, _ref2;
      this.q = q;
      _ref = [-1, -1], current = _ref[0], last = _ref[1];
      _ref1 = this.q;
      for (qchar_index = _i = 0, _len = _ref1.length; _i < _len; qchar_index = ++_i) {
        qchar = _ref1[qchar_index];
        _ref2 = [this.original_string.indexOf(qchar), current], current = _ref2[0], last = _ref2[1];
        if (current >= 0) {
          this.score += 1;
        }
        if (current >= 0 && qchar_index > 0) {
          if (this.original_string.indexOf(this.q[qchar_index - 1] + qchar) >= 0) {
            this.score += 1;
          }
        }
      }
      return this;
    };

    Fuzz.prototype.pushOrSkip = function(arr) {
      if (this.score >= this.q.length) {
        arr.push(this);
      }
      return this;
    };

    return Fuzz;

  })();

  this.Fuzzballs = (function() {
    function Fuzzballs(arr, options) {
      this.arr = arr;
      this.options = options != null ? options : {};
    }

    Fuzzballs.prototype.setOptions = function(options) {
      this.options = options;
    };

    Fuzzballs.prototype.find = function(q) {
      var item, out, _i, _len, _ref;
      out = [];
      _ref = this.arr;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        new Fuzz().setOriginal(item, this.options.extractor).quantifyMatch(q).pushOrSkip(out);
      }
      return out;
    };

    return Fuzzballs;

  })();

  FuzzFactory = (function() {
    function FuzzFactory() {}

    FuzzFactory.small = function() {
      return ["fishes", "dishes", "mats", "cats", "hats", "switch"];
    };

    FuzzFactory.large = function() {
      var i, _i, _j, _results, _results1;
      _results = [];
      for (i = _i = 0; _i <= 10000; i = ++_i) {
        _results.push((function() {
          _results1 = [];
          for (_j = 0; _j <= 1000; _j++){ _results1.push(_j); }
          return _results1;
        }).apply(this).join());
      }
      return _results;
    };

    FuzzFactory.complex = function() {
      var str, _i, _len, _ref, _results;
      _ref = this.small();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        str = _ref[_i];
        _results.push({
          'extractable': str
        });
      }
      return _results;
    };

    return FuzzFactory;

  })();

  describe('Fuzzballs', function() {
    describe("default configuration", function() {
      var found, fuzz, input, _ref;
      _ref = [], input = _ref[0], fuzz = _ref[1], found = _ref[2];
      beforeEach(function() {
        input = FuzzFactory.small();
        return fuzz = new Fuzzballs(input);
      });
      describe("matching all items", function() {
        beforeEach(function() {
          return found = fuzz.find("s");
        });
        it("contains the original string in each result", function() {
          var index, item, _i, _len, _results;
          _results = [];
          for (index = _i = 0, _len = found.length; _i < _len; index = ++_i) {
            item = found[index];
            _results.push(expect(item.original_string).toEqual(input[index]));
          }
          return _results;
        });
        return it("contains the number of characters in the query string", function() {
          var item, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = found.length; _i < _len; _i++) {
            item = found[_i];
            _results.push(expect(item.score).toEqual(1));
          }
          return _results;
        });
      });
      return describe("matching some items", function() {
        beforeEach(function() {
          return found = fuzz.find("sh");
        });
        it("should give appropriate scores based on matches and proximity", function() {
          expect(found[0].score).toEqual(3);
          return expect(found[2].score).toEqual(2);
        });
        it("should exclude items with a score less than the query length", function() {
          var item, _i, _len, _results;
          expect(found.length).toEqual(4);
          _results = [];
          for (_i = 0, _len = found.length; _i < _len; _i++) {
            item = found[_i];
            _results.push(expect(item.score).toBeGreaterThan(1));
          }
          return _results;
        });
        return it("should order items by score descending", function() {
          var i, item, scores, sorted, sortedScore, _i, _len, _results;
          scores = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = found.length; _i < _len; _i++) {
              item = found[_i];
              _results.push(item.score);
            }
            return _results;
          })();
          sorted = scores.sort(function(a, b) {
            return a.score - b.score;
          });
          console.log(sorted);
          _results = [];
          for (i = _i = 0, _len = sorted.length; _i < _len; i = ++_i) {
            sortedScore = sorted[i];
            _results.push(expect(scores[i]).toEqual(sortedScore));
          }
          return _results;
        });
      });
    });
    describe("with extractor", function() {
      var found, fuzz, input, _ref;
      _ref = [], input = _ref[0], fuzz = _ref[1], found = _ref[2];
      beforeEach(function() {
        return input = FuzzFactory.complex();
      });
      return describe("using the extractor", function() {
        beforeEach(function() {
          fuzz = new Fuzzballs(input, {
            extractor: function(obj) {
              return obj.extractable;
            }
          });
          return found = fuzz.find("s");
        });
        it("should keep the original object", function() {
          var index, item, _i, _len, _results;
          _results = [];
          for (index = _i = 0, _len = found.length; _i < _len; index = ++_i) {
            item = found[index];
            _results.push(expect(item.original).toEqual(input[index]));
          }
          return _results;
        });
        return it("should get a string to compare against", function() {
          var index, item, _i, _len, _results;
          _results = [];
          for (index = _i = 0, _len = found.length; _i < _len; index = ++_i) {
            item = found[index];
            _results.push(expect(item.original_string).toEqual(input[index].extractable));
          }
          return _results;
        });
      });
    });
    return describe("performance", function() {
      var input;
      input = null;
      return describe("with large datasets", function() {
        beforeEach(function() {
          return input = FuzzFactory.large();
        });
        return it("should take less than a second to search 10000 items", function() {
          var fuzz, t, _i, _results;
          t = new Date();
          fuzz = new Fuzzballs(input);
          fuzz.find((function() {
            _results = [];
            for (_i = 0; _i <= 100; _i++){ _results.push(_i); }
            return _results;
          }).apply(this).join());
          return expect(new Date() - t).toBeLessThan(1000);
        });
      });
    });
  });

}).call(this);
